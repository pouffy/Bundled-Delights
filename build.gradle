buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        jcenter()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:${forgegradle_version}"
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath "org.parchmentmc:librarian:${librarian_version}"
    }
}
plugins {
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = project.mod_version + "-forge-mc" + project.minecraft_version
group = project.maven_group
archivesBaseName = project.archives_base_name

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

jarJar.enable()

mixin {
    add sourceSets.main, "${modid}.refmap.json"
    config "${modid}.mixins.json"

    debug.verbose = true
    debug.export = true
}

minecraft {

    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', project.modid

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', project.modid

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', project.modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'Tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // JEI
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven { url = "https://maven.jaackson.me" }
    maven { url = "https://www.cursemaven.com" }
    maven {
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven { url = "https://modmaven.k-4u.nl" }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "JitPack"
        url = 'https://jitpack.io'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
    //    transitive = false
    //    jarJar.ranged(it, "[${mixin_extras_version},)")
    //}
    jarJar(group: "com.tterrag.registrate", name: "Registrate", version: "[${registrate_version},)") {
        transitive = false
        jarJar.pin(it, project.registrate_version)
    }
    implementation  fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-common-api:$jei_version")
    compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge-api:$jei_version")
    implementation fg.deobf("mezz.jei:jei-$minecraft_version-forge:$jei_version")

    implementation fg.deobf("curse.maven:${project.brewNChew}")
    implementation fg.deobf("curse.maven:${project.farmersRespite}")

    //Abnormals mods
    implementation fg.deobf("maven.modrinth:blueprint:${project.blueprint}")
    implementation fg.deobf("maven.modrinth:neapolitan:${project.neapolitan}")
    //runtimeOnly fg.deobf("maven.modrinth:abnormals-delight:${project.abnormalsDelight}")
    //runtimeOnly fg.deobf("maven.modrinth:respiteful:${project.respiteful}")

    implementation fg.deobf("maven.modrinth:farmers-delight:${project.farmersDelight}")

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

processResources {
    def properties = [
            "author":                       project.author,
            "version":                      project.mod_version,
            "fml_version_spec":             project.fml_version_spec,
            "minecraft_version_spec":       project.minecraft_version_spec,
            "forge_version_spec":           project.forge_version_spec,
            "farmers_delight_version_spec": project.farmers_delight_version_spec,
            "brewinandchewin_version_spec": project.brewinandchewin_version_spec
    ]
    inputs.properties properties
    filesMatching("META-INF/mods.toml") {
        expand properties
    }
    exclude ".cache"
}

jar {
    classifier "slim"
    from "LICENSE"
    manifest {
        attributes([
                "Specification-Title"     : project.modid,
                "Specification-Vendor"    : project.author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "1",
                "Implementation-Vendor"   : project.author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': "${modid}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
