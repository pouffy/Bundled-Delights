buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        jcenter()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:${forgegradle_version}"
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath "org.parchmentmc:librarian:${librarian_version}"
    }
}
plugins {
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = project.mod_version + "-forge-mc" + project.mc_version
group = project.maven_group
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jarJar {
    // Include or exclude dependencies here from runtime configuration
    dependencies {
        // Exclude any dependency which begins with 'com.google.gson.'
        include (dependency 'org.apfloat:apfloat:2.0')
        include (dependency 'org.jgrapht:jgrapht:1.5.2')
        include (dependency 'org.jgrapht:jgrapht-core:1.5.2')
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
    config "${modid}.mixins.json"

    debug.verbose = true
    debug.export = true
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

jarJar.enable()

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', project.modid

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', project.modid

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', project.modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        // JEI
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven { url "https://maven.jaackson.me" }
    maven { url "https://www.cursemaven.com" }
    maven { url "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://modmaven.k-4u.nl" }
    maven {
        name = 'Thermal Maven'
        url = 'https://maven.covers1624.net/'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        transitive = false
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }
    jarJar(group: "com.tterrag.registrate", name: "Registrate", version: "[${registrate_version},)") {
        transitive = false
        jarJar.pin(it, project.registrate_version)
    }
    implementation  fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    compileOnly fg.deobf("mezz.jei:jei-$mc_version-common-api:$jei_version")
    compileOnly fg.deobf("mezz.jei:jei-$mc_version-forge-api:$jei_version")
    implementation fg.deobf("mezz.jei:jei-$mc_version-forge:$jei_version")

    //runtimeOnly fg.deobf("curse.maven:${project.farmersRespite}")
    //runtimeOnly fg.deobf("curse.maven:${project.brewNChew}")

    //Farmers Delight & Its Addons [Fsr Umpazz hasn't made modrinth pages for Respite or Brewin' N Chewin' yet]
    implementation fg.deobf("maven.modrinth:farmers-delight:${project.farmersDelight}")
    //runtimeOnly fg.deobf("maven.modrinth:miners-delight:${project.minersDelight}")

    //Abnormals mods
    //runtimeOnly fg.deobf("maven.modrinth:blueprint:${project.blueprint}")
    //runtimeOnly fg.deobf("maven.modrinth:neapolitan:${project.neapolitan}")
    //runtimeOnly fg.deobf("maven.modrinth:abnormals-delight:${project.abnormalsDelight}")
    //runtimeOnly fg.deobf("maven.modrinth:respiteful:${project.respiteful}")

    //Thermal mods
    //runtimeOnly fg.deobf("maven.modrinth:cofh-core:${cofhCore}")
    //runtimeOnly fg.deobf("maven.modrinth:thermal-foundation:${thermalFoundation}")
    //runtimeOnly fg.deobf("maven.modrinth:thermal-expansion:${thermalExpansion}")

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    testAnnotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    minecraftLibrary 'org.apfloat:apfloat:1.11.0'
    minecraftLibrary 'org.jgrapht:jgrapht:1.5.2'
    minecraftLibrary 'org.jgrapht:jgrapht-core:1.5.2'
}

processResources {
    def properties = [
            "author":                       project.author,
            "version":                      project.mod_version,
            "fml_version_spec":             project.fml_version_spec,
            "minecraft_version_spec":       project.minecraft_version_spec,
            "forge_version_spec":           project.forge_version_spec,
            "farmers_delight_version_spec": project.farmers_delight_version_spec
    ]
    inputs.properties properties
    filesMatching("META-INF/mods.toml") {
        expand properties
    }
    exclude ".cache"
}


// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Bundled Delight",
                "Specification-Vendor"    : "PouffyDev",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "PouffyDev",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "bundledelight.mixins.json" // TODO: update this for your modid
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
